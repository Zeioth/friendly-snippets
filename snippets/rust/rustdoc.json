{
    "comment": {
        "prefix": "///",
        "body": [
            "/// ${1:Description.}$0",
            "///",
            "/// # Arguments",
            "///",
            "/// * ${3:`argument_name`} - ${4:type and description.}",
            "///",
            "/// # Returns",
            "/// ${2:type and description of the returned object.}",
            "///",
            "/// # Examples",
            "/// ```rust",
            "/// ${5:write me later}",
            "/// ```"
        ],
        "description": "A Rust comment with description, parameters, returns, and examples."
    },
    "crate": {
        "prefix": "//!",
        "body": [
            "//! ${1:Description.}$0",
            "//!",
            "//! # Examples",
            "//! ```rust",
            "//! ${2:write me later}",
            "//! ```"
        ],
        "description": "A special Rust comment to describe a crate, with description and examples."
    },
    "test": {
        "prefix": "///test",
        "body": [
            "/// ${1:Description.}$0",
            "///",
            "/// # Examples",
            "/// ```rust",
            "/// ${2:write me later}",
            "/// ```"
        ],
        "description": "A Rust comment to describe a test, with description and examples."
    },
    "broken_intra_doc_links": {
        "prefix": "#![warn(rustdoc::broken_intra_doc_links)]",
        "body": [
            "#![${1:warn}$0(rustdoc::broken_intra_doc_links)]"
        ],
        "description": "How to report broken links when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "private_intra_doc_links": {
        "prefix": "#![warn(rustdoc::private_intra_doc_links)]",
        "body": [
            "#![${1:warn}$0(rustdoc::private_intra_doc_links)]"
        ],
        "description": "How to report when a public item is documented as private by mistake, or vice-versa, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "missing_docs": {
        "prefix": "#![warn(missing_docs)]",
        "body": [
            "#![${1:warn}$0(missing_docs)]"
        ],
        "description": "How to report when an item is missing comments, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "missing_crate_level_docs": {
        "prefix": "#![warn(rustdoc::missing_crate_level_docs)]",
        "body": [
            "#![${1:warn}$0(rustdoc::missing_crate_level_docs)]"
        ],
        "description": "How to report when a crate is missing comments, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "missing_doc_code_examples": {
        "prefix": "#![warn(rustdoc::missing_doc_code_examples)]",
        "body": [
            "#![${1:warn}$0(rustdoc::missing_doc_code_examples)]"
        ],
        "description": "How to report when a crate is missing examples, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "private_doc_tests": {
        "prefix": "#![warn(rustdoc::private_doc_tests)]",
        "body": [
            "#![${1:warn}$0(rustdoc::private_doc_tests)]"
        ],
        "description": "How to report documentation tests when they are on a private item, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "invalid_codeblock_attributes": {
        "prefix": "#![warn(rustdoc::invalid_codeblock_attributes)]",
        "body": [
            "#![${1:warn}$0(rustdoc::invalid_codeblock_attributes)]"
        ],
        "description": "How to report code block attributes in examples that have potentially mis-typed values, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "invalid_html_tags": {
        "prefix": "#![warn(rustdoc::invalid_html_tags)]",
        "body": [
            "#![${1:warn}$0(rustdoc::invalid_html_tags)]"
        ],
        "description": "How to report unclosed or invalid HTML tags, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "invalid_rust_codeblocks": {
        "prefix": "#![warn(rustdoc::invalid_rust_codeblocks)]",
        "body": [
            "#![${1:warn}$0(rustdoc::invalid_rust_codeblocks)]"
        ],
        "description": "How to report code blocks in examples that are invalid, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "bare_urls": {
        "prefix": "#![warn(rustdoc::bare_urls)]",
        "body": [
            "#![${1:warn}$0(rustdoc::bare_urls)]"
        ],
        "description": "How to report URLs which are not links, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
    },
    "cfg": {
        "prefix": "#[cfg]",
        "body": [
            "#[cfg(any(${1:unix}$0, doc))"
        ],
        "description": "Documents the item can only be used on Unix.\n\n* Accepted vales: unix, windows"
    },
    "alias": {
        "prefix": "#[doc(alias = \"\")]",
        "body": [
            "#[doc(alias = \"${1:name}$0\")]"
        ],
        "description": "This feature allows you to add alias(es) to an item when using the rustdoc search through the doc(alias) attribute."
    }
}
